// config
const SSID = ''
const PASSWORD = ''
const HOST = ''
const PORT = 80

// modules
const wifi = require('Wifi')
const WebSocket = require('ws')

// screen setup
// size: 128x64
I2C1.setup({ scl: D4, sda: D5 })
const g = require('SSD1306').connect(I2C1)
g.clear()
g.setRotation(2 /* 180deg */)
g.flip()

const renderVars = {
  count: 0,
  connectionStatus: 'conn...',
  id: '------',
  battery: 1
}

function renderCount () {
  // function clearRect (x1, y1, x2, y2)
  g.clearRect(0, 0, 128, 42)
  g.setFontVector(40)
  g.drawString(renderVars.count.toString(), 2, 2)
  g.flip()
}

function renderStatus () {
  g.clearRect(0, 54, 128, 64)
  g.setFontVector(10)
  g.drawString(renderVars.connectionStatus, 2, 54)
  g.drawString('#' + renderVars.id, 84, 54)
  g.flip()
}

renderCount()
renderStatus()

// WiFi
function connectWiFi () {
  wifi.connect(SSID, { password: PASSWORD }, function () {
    wifi.save()
  })
}

wifi.on('disconnected', function () {
  renderVars.connectionStatus = 'conn lost'
  renderStatus()
})

wifi.on('connected', function () {
  renderVars.connectionStatus = wifi.getIP().ip
  renderStatus()
  connectWs()
})

// WS
let ws
let msgId = 0
const sendQ = []

function register () {
  renderVars.connectionStatus = 'register'
  renderVars.id = '------'
  renderStatus()
  ws.send('REGISTER')
}

function handleMsg (message) {
  console.log(message)
  let args = message.split(' ')
  switch (args[0]) {
    case 'REGISTERED':
      renderVars.id = args[1]
      renderVars.connectionStatus = 'ok'
      renderStatus()
      break
    case 'SCORED':
      sendQ.splice(sendQ.findIndex(function (el) { return el[0] == args[1] }), 1)
      break
  }
}

function connectWs () {
  ws = new WebSocket(HOST, {
    port: PORT,
    path: '/ws'
  })

  ws.on('open', register)
  ws.on('close', register)
  ws.on('message', handleMsg)
}

connectWiFi()
// connectWs()

// Button
pinMode(D25, 'input_pullup')

setWatch(function (e) {
  renderVars.count++
  msgId++
  renderCount()
  sendQ.push([msgId, `SCORE ${msgId} ${Date.now() | 0} ${renderVars.count}`])
  ws.send(`SCORE ${msgId} ${Date.now() | 0} ${renderVars.count}`)
  // console.log(sendQ)
}, D25, { repeat: true, edge: 'falling', debounce: 10 })
